import os
import asyncio
import logging
from datetime import datetime, timedelta
import json
import aiohttp
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
HF_API_KEY = os.getenv('HF_API_KEY')  # Hugging Face API token
IOS_WEBHOOK_URL = os.getenv('IOS_WEBHOOK_URL')

class HuggingFaceReminderBot:
    def __init__(self):
        self.application = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ iOS!

üí° Powered by Hugging Face - 100% –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É, –∏ —è —Å–æ–∑–¥–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:

üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º"
‚Ä¢ "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ" 
‚Ä¢ "–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ 18:00"
‚Ä¢ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É —É—Ç—Ä–æ–º"

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üÜì Hugging Face –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –¥–ª—è –≤—Å–µ—Ö!"""
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
2Ô∏è‚É£ AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–µ—Ç:
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á
   ‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è
   ‚Ä¢ –¢–∏–ø –∑–∞–¥–∞—á–∏
   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç

3Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –≤ iOS Reminders

üéØ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:
‚Ä¢ "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è"
‚Ä¢ "—á–µ—Ä–µ–∑ —á–∞—Å", "—á–µ—Ä–µ–∑ 2 –¥–Ω—è"
‚Ä¢ "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫"
‚Ä¢ "15:00", "–≤ 9 —É—Ç—Ä–∞", "–≤–µ—á–µ—Ä–æ–º"
‚Ä¢ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã: "25 –¥–µ–∫–∞–±—Ä—è"

üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–¥–∞—á:
‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏, –≤—Å—Ç—Ä–µ—á–∞, —Å–¥–∞—Ç—å, –∫—É–ø–∏—Ç—å
‚Ä¢ –ø–æ–∑–≤–æ–Ω–∏—Ç—å, –ø—Ä–∏–Ω—è—Ç—å, –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –≤—Ä–∞—á
‚Ä¢ –¥–µ–ª–æ, –∑–∞–¥–∞—á–∞, —Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞

üÜì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Hugging Face:
‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞
‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"""
        await update.message.reply_text(help_text)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        stats_text = """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

ü§ñ AI –ú–æ–¥–µ–ª—å: Smart Pattern Analysis + Hugging Face
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ~1-5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üåç –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 24/7

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π iOS
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

üìà –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ~95%
üöÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: <10 —Å–µ–∫—É–Ω–¥"""
        await update.message.reply_text(stats_text)

    async def send_to_ios(self, reminder_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ iOS Shortcuts"""
        if not IOS_WEBHOOK_URL:
            logger.warning("iOS webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –≤ iOS
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ iOS: {reminder_data}")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    IOS_WEBHOOK_URL,
                    json=reminder_data,  # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    success = response.status == 200
                    if success:
                        logger.info("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ iOS")
                    else:
                        logger.error(f"‚ùå iOS webhook error: {response.status}")
                    return success
        except Exception as e:
            logger.error(f"‚ùå iOS webhook failed: {e}")
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({user_id}): {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        start_time = datetime.now()
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            analysis = await self.analyze_message(user_message)
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            if not analysis.get("is_task", False):
                reason = analysis.get("reason", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É")
                await processing_msg.edit_text(
                    f"ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å:\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: '–∫—É–ø–∏—Ç—å', '–≤—Å—Ç—Ä–µ—á–∞', '–Ω–∞–ø–æ–º–Ω–∏'\n"
                    f"‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É: '–≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º'\n\n"
                    f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {processing_time:.1f}—Å"
                )
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è iOS
            ios_data = {
                "title": analysis.get("title", user_message),
                "notes": analysis.get("description", ""),
                "date": analysis.get("date"),
                "time": analysis.get("time"),
                "priority": analysis.get("priority", "medium"),
                "category": analysis.get("category", "other")
            }
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ iOS
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ iOS: {ios_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ iOS
            await processing_msg.edit_text("üì± –°–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ iOS...")
            ios_success = await self.send_to_ios(ios_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            emoji_map = {
                "high": "üî•", "medium": "‚≠ê", "low": "üìù",
                "meeting": "üë•", "medicine": "üíä", "shopping": "üõí",
                "call": "üìû", "work": "üíº", "other": "üìã"
            }
            
            priority_emoji = emoji_map.get(ios_data['priority'], '‚≠ê')
            category_emoji = emoji_map.get(ios_data['category'], 'üìã')
            
            if ios_success:
                success_text = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                success_text += f"{category_emoji} {ios_data['title']}\n"
                
                if ios_data['date']:
                    success_text += f"üìÖ –î–∞—Ç–∞: {ios_data['date']}\n"
                if ios_data['time']:
                    success_text += f"‚è∞ –í—Ä–µ–º—è: {ios_data['time']}\n"
                    
                success_text += f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ios_data['priority']}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if 'keywords_found' in analysis:
                    success_text += f"üîç –ù–∞–π–¥–µ–Ω—ã: {', '.join(analysis['keywords_found'])}\n"
                
                success_text += f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å\n"
                success_text += f"ü§ó Powered by Hugging Face"
                
                await processing_msg.edit_text(success_text)
            else:
                await processing_msg.edit_text(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ iOS\n\n"
                    f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞: {ios_data['title']}\n" +
                    (f"‚Ä¢ –î–∞—Ç–∞: {ios_data['date']}\n" if ios_data['date'] else "") +
                    (f"‚Ä¢ –í—Ä–µ–º—è: {ios_data['time']}\n" if ios_data['time'] else "") +
                    f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ios_data['priority']}\n\n"
                    f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS Shortcuts\n"
                    f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {processing_time:.1f}—Å"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await processing_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("üöÄ Hugging Face Reminder Bot –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
        
    logger.info("ü§ó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Hugging Face + Smart Pattern Analysis")
    logger.info(f"üîë HF API Key: {'‚úÖ' if HF_API_KEY else '‚ùå (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API)'}")
    logger.info(f"üì± iOS Integration: {'‚úÖ' if IOS_WEBHOOK_URL else '‚ùå'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = HuggingFaceReminderBot()
    bot.run()
