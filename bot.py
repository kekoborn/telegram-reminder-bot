import os
import asyncio
import logging
from datetime import datetime, timedelta
import json
import aiohttp
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
HF_API_KEY = os.getenv('HF_API_KEY')  # Hugging Face API token
IOS_WEBHOOK_URL = os.getenv('IOS_WEBHOOK_URL')

class HuggingFaceReminderBot:
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ iOS!

üí° Powered by Hugging Face - 100% –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–¥–∞—á—É, –∏ —è —Å–æ–∑–¥–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:

üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º"
‚Ä¢ "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ" 
‚Ä¢ "–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ 18:00"
‚Ä¢ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ —Å—É–±–±–æ—Ç—É —É—Ç—Ä–æ–º"

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üÜì Hugging Face –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –¥–ª—è –≤—Å–µ—Ö!"""
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
2Ô∏è‚É£ AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–µ—Ç:
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á
   ‚Ä¢ –î–∞—Ç—É –∏ –≤—Ä–µ–º—è
   ‚Ä¢ –¢–∏–ø –∑–∞–¥–∞—á–∏
   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç

3Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –≤ iOS Reminders

üéØ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:
‚Ä¢ "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è"
‚Ä¢ "—á–µ—Ä–µ–∑ —á–∞—Å", "—á–µ—Ä–µ–∑ 2 –¥–Ω—è"
‚Ä¢ "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫"
‚Ä¢ "15:00", "–≤ 9 —É—Ç—Ä–∞", "–≤–µ—á–µ—Ä–æ–º"
‚Ä¢ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã: "25 –¥–µ–∫–∞–±—Ä—è"

üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–¥–∞—á:
‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏, –≤—Å—Ç—Ä–µ—á–∞, —Å–¥–∞—Ç—å, –∫—É–ø–∏—Ç—å
‚Ä¢ –ø–æ–∑–≤–æ–Ω–∏—Ç—å, –ø—Ä–∏–Ω—è—Ç—å, –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, –≤—Ä–∞—á
‚Ä¢ –¥–µ–ª–æ, –∑–∞–¥–∞—á–∞, —Ä–∞–±–æ—Ç–∞, —É—á–µ–±–∞

üÜì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Hugging Face:
‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞
‚Ä¢ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö"""
        await update.message.reply_text(help_text)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        stats_text = """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

ü§ñ AI –ú–æ–¥–µ–ª—å: Smart Pattern Analysis + Hugging Face
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ~1-5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—Ä–æ—Å
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üåç –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: 24/7

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π iOS
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏

üìà –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ~95%
üöÄ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: <10 —Å–µ–∫—É–Ω–¥"""
        await update.message.reply_text(stats_text)

    def smart_pattern_analysis(self, text: str) -> dict:
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –±–µ–∑ AI API"""
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        task_keywords = {
            'meeting': ['–≤—Å—Ç—Ä–µ—á–∞', '—Å–æ–±—Ä–∞–Ω–∏–µ', '—Å–æ–≤–µ—â–∞–Ω–∏–µ', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è'],
            'medicine': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '—Ç–∞–±–ª–µ—Ç–∫–∞', '–ø—Ä–∏–Ω—è—Ç—å', '–≤—Ä–∞—á', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞'],
            'shopping': ['–∫—É–ø–∏—Ç—å', '–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–ø–æ–∫—É–ø–∫–∏'],
            'call': ['–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '–∑–≤–æ–Ω–æ–∫', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–Ω–∞–±—Ä–∞—Ç—å'],
            'work': ['—Å–¥–∞—Ç—å', '–æ—Ç—á–µ—Ç', '—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç', '–¥–µ–¥–ª–∞–π–Ω'],
            'personal': ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–µ –∑–∞–±—ã—Ç—å', '–≤–∞–∂–Ω–æ']
        }
        
        priority_words = {
            'high': ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', 'asap', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ'],
            'low': ['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–Ω–µ —Å—Ä–æ—á–Ω–æ', '—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è']
        }
        
        time_words = {
            'morning': ['—É—Ç—Ä–æ–º', '—Å —É—Ç—Ä–∞', '—É—Ç—Ä–µ–Ω–Ω–∏–π'],
            'afternoon': ['–¥–Ω–µ–º', '–≤ –æ–±–µ–¥', '–¥–Ω–µ–≤–Ω–æ–π'],
            'evening': ['–≤–µ—á–µ—Ä–æ–º', '–≤–µ—á–µ—Ä–Ω–∏–π'],
            'night': ['–Ω–æ—á—å—é', '–ø–æ–∑–¥–Ω–æ']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–µ–π
        found_keywords = []
        category = 'other'
        
        for cat, keywords in task_keywords.items():
            for keyword in keywords:
                if keyword in text.lower():
                    found_keywords.append(keyword)
                    category = cat
                    break
        
        if not found_keywords:
            return {"is_task": False, "reason": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        now = datetime.now()
        date_found = None
        time_found = None
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        if '–∑–∞–≤—Ç—Ä–∞' in text.lower():
            date_found = (now + timedelta(days=1)).strftime('%Y-%m-%d')
        elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text.lower():
            date_found = (now + timedelta(days=2)).strftime('%Y-%m-%d')
        elif '—Å–µ–≥–æ–¥–Ω—è' in text.lower():
            date_found = now.strftime('%Y-%m-%d')
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4, '—Å—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }
        
        for day_name, day_num in weekdays.items():
            if day_name in text.lower():
                days_ahead = day_num - now.weekday()
                if days_ahead <= 0:  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
                    days_ahead += 7
                target_date = now + timedelta(days=days_ahead)
                date_found = target_date.strftime('%Y-%m-%d')
                break
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è "—á–µ—Ä–µ–∑ X"
        through_match = re.search(r'—á–µ—Ä–µ–∑ (\d+) (—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)', text.lower())
        if through_match:
            amount = int(through_match.group(1))
            unit = through_match.group(2)
            
            if '—á–∞—Å' in unit:
                target_time = now + timedelta(hours=amount)
                date_found = target_time.strftime('%Y-%m-%d')
                time_found = target_time.strftime('%H:%M')
            elif '–¥–µ–Ω—å' in unit or '–¥–Ω—è' in unit or '–¥–Ω–µ–π' in unit:
                target_date = now + timedelta(days=amount)
                date_found = target_date.strftime('%Y-%m-%d')
        
        # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        time_patterns = [
            r'(\d{1,2}):(\d{2})',  # 15:30
            r'–≤ (\d{1,2}) (—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞)',  # –≤ 3 –¥–Ω—è
            r'(\d{1,2}) —á–∞—Å–æ–≤'  # 15 —á–∞—Å–æ–≤
        ]
        
        for pattern in time_patterns:
            time_match = re.search(pattern, text.lower())
            if time_match:
                if ':' in time_match.group():
                    time_found = time_match.group()
                else:
                    hour = int(time_match.group(1))
                    period = time_match.group(2) if len(time_match.groups()) > 1 else None
                    
                    if period == '–≤–µ—á–µ—Ä–∞' and hour < 12:
                        hour += 12
                    elif period == '—É—Ç—Ä–∞' and hour == 12:
                        hour = 0
                        
                    time_found = f"{hour:02d}:00"
                break
        
        # –í—Ä–µ–º—è –ø–æ —Å–ª–æ–≤–∞–º
        for time_period, words in time_words.items():
            for word in words:
                if word in text.lower() and not time_found:
                    if time_period == 'morning':
                        time_found = '09:00'
                    elif time_period == 'afternoon':
                        time_found = '14:00'
                    elif time_period == 'evening':
                        time_found = '18:00'
                    elif time_period == 'night':
                        time_found = '21:00'
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority = 'medium'
        for level, words in priority_words.items():
            for word in words:
                if word in text.lower():
                    priority = level
                    break
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å "—Å–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "—Å—Ä–æ—á–Ω–æ" - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if any(word in text.lower() for word in ['—Å–µ–≥–æ–¥–Ω—è', '—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ']):
            priority = 'high'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = text
        if len(title) > 50:
            # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_clean = re.sub(r'\b(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|—á–µ—Ä–µ–∑ \d+ \w+|\d{1,2}:\d{2}|–≤ \d{1,2} \w+)\b', '', title.lower())
            title_clean = re.sub(r'\s+', ' ', title_clean).strip()
            if len(title_clean) > 50:
                title = title_clean[:47] + "..."
            else:
                title = title_clean.capitalize()
        
        return {
            "is_task": True,
            "title": title,
            "description": text,
            "date": date_found,
            "time": time_found,
            "priority": priority,
            "category": category,
            "keywords_found": found_keywords
        }

    async def call_huggingface_api(self, text: str) -> dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–∑–æ–≤ Hugging Face API"""
        
        if not HF_API_KEY:
            logger.warning("HF API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ pattern matching")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å
        api_url = "https://api-inference.huggingface.co/models/ai-forever/rugpt3medium_based_on_gpt2"
        
        headers = {
            'Authorization': f'Bearer {HF_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        prompt = f"–ó–∞–¥–∞—á–∞: {text}\n–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ:"
        
        data = {
            'inputs': prompt,
            'parameters': {
                'max_length': 100,
                'temperature': 0.7,
                'do_sample': True
            }
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, headers=headers, json=data, timeout=aiohttp.ClientTimeout(total=15)) as response:
                    if response.status == 200:
                        result = await response.json()
                        generated_text = result[0]['generated_text']
                        logger.info(f"HF API response: {generated_text}")
                        return {"generated": generated_text}
                    else:
                        logger.warning(f"HF API error: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"HF API call failed: {e}")
            return None

    async def analyze_message(self, text: str) -> dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {text}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º smart pattern analysis
        pattern_result = self.smart_pattern_analysis(text)
        
        if pattern_result.get("is_task", False):
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ pattern matching")
            return pattern_result
        
        # –ï—Å–ª–∏ pattern matching –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HF API
        logger.info("üîÑ Pattern matching –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HF API...")
        hf_result = await self.call_huggingface_api(text)
        
        if hf_result:
            # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç HF
            enhanced_text = text + " " + hf_result.get('generated', '')
            enhanced_result = self.smart_pattern_analysis(enhanced_text)
            if enhanced_result.get("is_task", False):
                logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é HF API")
                return enhanced_result
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –∏—â–µ–º —Ö–æ—Ç—è –±—ã –≤—Ä–µ–º—è
        logger.info("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        return self.fallback_time_analysis(text)

    def fallback_time_analysis(self, text: str) -> dict:
        """–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º —Ö–æ—Ç—è –±—ã –≤—Ä–µ–º—è"""
        
        # –õ—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π
        time_indicators = [
            '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º', '–¥–Ω–µ–º',
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
            '—á–µ—Ä–µ–∑', '—á–∞—Å', '–º–∏–Ω—É—Ç', '–¥–Ω—è', '–Ω–µ–¥–µ–ª'
        ]
        
        has_time = any(indicator in text.lower() for indicator in time_indicators)
        has_numbers = re.search(r'\d', text)
        
        if has_time or has_numbers:
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è
            pattern_result = self.smart_pattern_analysis(text)
            if pattern_result.get("date") or pattern_result.get("time"):
                pattern_result["is_task"] = True
                pattern_result["title"] = text[:50] + "..." if len(text) > 50 else text
                pattern_result["category"] = "other"
                return pattern_result
        
        return {
            "is_task": False, 
            "reason": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏"
        }

    async def send_to_ios(self, reminder_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ iOS Shortcuts"""
        if not IOS_WEBHOOK_URL:
            logger.warning("iOS webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    IOS_WEBHOOK_URL, 
                    json=reminder_data,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    success = response.status == 200
                    if success:
                        logger.info("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ iOS")
                    else:
                        logger.error(f"‚ùå iOS webhook error: {response.status}")
                    return success
        except Exception as e:
            logger.error(f"‚ùå iOS webhook failed: {e}")
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({user_id}): {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        start_time = datetime.now()
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            analysis = await self.analyze_message(user_message)
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            if not analysis.get("is_task", False):
                reason = analysis.get("reason", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É")
                await processing_msg.edit_text(
                    f"ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å:\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: '–∫—É–ø–∏—Ç—å', '–≤—Å—Ç—Ä–µ—á–∞', '–Ω–∞–ø–æ–º–Ω–∏'\n"
                    f"‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É: '–≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º'\n\n"
                    f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {processing_time:.1f}—Å"
                )
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è iOS
            ios_data = {
                "title": analysis.get("title", user_message),
                "notes": analysis.get("description", ""),
                "date": analysis.get("date"),
                "time": analysis.get("time"),
                "priority": analysis.get("priority", "medium"),
                "category": analysis.get("category", "other")
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ iOS
            await processing_msg.edit_text("üì± –°–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ iOS...")
            ios_success = await self.send_to_ios(ios_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            emoji_map = {
                "high": "üî•", "medium": "‚≠ê", "low": "üìù",
                "meeting": "üë•", "medicine": "üíä", "shopping": "üõí",
                "call": "üìû", "work": "üíº", "other": "üìã"
            }
            
            priority_emoji = emoji_map.get(ios_data['priority'], '‚≠ê')
            category_emoji = emoji_map.get(ios_data['category'], 'üìã')
            
            if ios_success:
                success_text = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                success_text += f"{category_emoji} {ios_data['title']}\n"
                
                if ios_data['date']:
                    success_text += f"üìÖ –î–∞—Ç–∞: {ios_data['date']}\n"
                if ios_data['time']:
                    success_text += f"‚è∞ –í—Ä–µ–º—è: {ios_data['time']}\n"
                    
                success_text += f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ios_data['priority']}\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if 'keywords_found' in analysis:
                    success_text += f"üîç –ù–∞–π–¥–µ–Ω—ã: {', '.join(analysis['keywords_found'])}\n"
                
                success_text += f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å\n"
                success_text += f"ü§ó Powered by Hugging Face"
                
                await processing_msg.edit_text(success_text)
            else:
                await processing_msg.edit_text(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ iOS\n\n"
                    f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∞: {ios_data['title']}\n" +
                    (f"‚Ä¢ –î–∞—Ç–∞: {ios_data['date']}\n" if ios_data['date'] else "") +
                    (f"‚Ä¢ –í—Ä–µ–º—è: {ios_data['time']}\n" if ios_data['time'] else "") +
                    f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ios_data['priority']}\n\n"
                    f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ iOS Shortcuts\n"
                    f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {processing_time:.1f}—Å"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await processing_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("üöÄ Hugging Face Reminder Bot –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
        
    logger.info("ü§ó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Hugging Face + Smart Pattern Analysis")
    logger.info(f"üîë HF API Key: {'‚úÖ' if HF_API_KEY else '‚ùå (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ API)'}")
    logger.info(f"üì± iOS Integration: {'‚úÖ' if IOS_WEBHOOK_URL else '‚ùå'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = HuggingFaceReminderBot()
    bot.run()
