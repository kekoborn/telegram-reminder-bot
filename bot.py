import os
import asyncio
import logging
from datetime import datetime, timedelta
import json
import aiohttp
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
IOS_WEBHOOK_URL = os.getenv('IOS_WEBHOOK_URL')  # URL –¥–ª—è iOS Shortcuts

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

class ReminderBot:
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ iOS!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 10 —É—Ç—Ä–∞"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ —á–∞—Å"

–ö–æ–º–∞–Ω–¥—ã:
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–º–æ—â—å
        """
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
2. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∏–∑–≤–ª–µ—á–µ—Ç:
   - –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   - –î–∞—Ç—É –∏ –≤—Ä–µ–º—è
   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç

3. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ iOS —á–µ—Ä–µ–∑ Shortcuts

–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ó–∞–≤—Ç—Ä–∞ –≤ 9 —É—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
‚Ä¢ "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
‚Ä¢ "–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
‚Ä¢ "15 –º–∞—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ê–Ω–Ω—ã"
        """
        await update.message.reply_text(help_text)

    async def analyze_message_with_ai(self, text: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini AI"""
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–µ–π –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.
–ï—Å–ª–∏ –¥–∞, –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{{
    "is_task": true/false,
    "title": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
    "description": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "date": "YYYY-MM-DD –∏–ª–∏ null",
    "time": "HH:MM –∏–ª–∏ null",
    "priority": "high/medium/low",
    "relative_time": "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–¥–Ω–µ–π –∏–ª–∏ null"
}}

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}

–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ —á–∞—Å), –≤—ã—á–∏—Å–ª–∏ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        
        try:
            response = model.generate_content(prompt)
            result = json.loads(response.text.strip())
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")
            return {"is_task": False, "error": str(e)}

    def calculate_absolute_time(self, relative_time: str) -> dict:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ"""
        now = datetime.now()
        result = {"date": None, "time": None}
        
        try:
            if "–∑–∞–≤—Ç—Ä–∞" in relative_time.lower():
                target_date = now + timedelta(days=1)
                result["date"] = target_date.strftime('%Y-%m-%d')
            elif "—á–µ—Ä–µ–∑" in relative_time.lower():
                if "—á–∞—Å" in relative_time:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                    import re
                    hours = re.findall(r'\d+', relative_time)
                    if hours:
                        target_time = now + timedelta(hours=int(hours[0]))
                        result["date"] = target_time.strftime('%Y-%m-%d')
                        result["time"] = target_time.strftime('%H:%M')
                elif "–¥–µ–Ω—å" in relative_time or "–¥–Ω—è" in relative_time:
                    days = re.findall(r'\d+', relative_time)
                    if days:
                        target_date = now + timedelta(days=int(days[0]))
                        result["date"] = target_date.strftime('%Y-%m-%d')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            
        return result

    async def send_to_ios(self, reminder_data: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ iOS —á–µ—Ä–µ–∑ Shortcuts webhook"""
        if not IOS_WEBHOOK_URL:
            logger.warning("iOS webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(IOS_WEBHOOK_URL, json=reminder_data) as response:
                    if response.status == 200:
                        logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ iOS")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ iOS: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ iOS: {e}")
            return False

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
            analysis = await self.analyze_message_with_ai(user_message)
            
            if not analysis.get("is_task", False):
                await update.message.reply_text(
                    "ü§î –Ø –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç—Ç–æ –∫–∞–∫ –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ '–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º'\n"
                    "‚Ä¢ '–ß–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è iOS
            ios_data = {
                "title": analysis.get("title", user_message),
                "notes": analysis.get("description", ""),
                "date": analysis.get("date"),
                "time": analysis.get("time"),
                "priority": analysis.get("priority", "medium")
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ
            if analysis.get("relative_time"):
                abs_time = self.calculate_absolute_time(analysis["relative_time"])
                if abs_time["date"]:
                    ios_data["date"] = abs_time["date"]
                if abs_time["time"]:
                    ios_data["time"] = abs_time["time"]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ iOS
            success = await self.send_to_ios(ios_data)
            
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                confirmation += f"üìù **{ios_data['title']}**\n"
                
                if ios_data['date']:
                    confirmation += f"üìÖ –î–∞—Ç–∞: {ios_data['date']}\n"
                if ios_data['time']:
                    confirmation += f"‚è∞ –í—Ä–µ–º—è: {ios_data['time']}\n"
                    
                confirmation += f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {ios_data['priority']}"
                
                await update.message.reply_text(confirmation, parse_mode='Markdown')
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ iOS.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Shortcuts."
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
        
    if not GEMINI_API_KEY:
        logger.error("GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
        
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = ReminderBot()
    bot.run()