import os
import asyncio
import logging
from datetime import datetime, timedelta
import json
import aiohttp
import re
from urllib.parse import quote
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
HF_API_KEY = os.getenv('HF_API_KEY')

class AutoReminderBot:
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ iOS!

üí° Powered by Hugging Face - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∏ —è —Å–æ–∑–¥–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É:

üìù –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ "–ó–∞–≤—Ç—Ä–∞ –≤ 15:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º"
‚Ä¢ "–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ" 
‚Ä¢ "–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ 18:00"
‚Ä¢ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã"

üîó –ù–∞–∂–º–∏—Ç–µ —Å—Å—ã–ª–∫—É ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å
/setup - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ iOS"""
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
2Ô∏è‚É£ –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç —Å—Å—ã–ª–∫—É
3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è iOS Shortcuts
4Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

üì± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ –í—Ä–µ–º—è: "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00", "—á–µ—Ä–µ–∑ —á–∞—Å"
‚Ä¢ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤ –ø—è—Ç–Ω–∏—Ü—É"
‚Ä¢ –î–∞—Ç—ã: "25 –¥–µ–∫–∞–±—Ä—è", "31.12.2024"

üîß –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ iOS:
1. –°–æ–∑–¥–∞—Ç—å Shortcut "CreateReminder"
2. –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º
3. –î–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º

/setup - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        await update.message.reply_text(help_text)

    async def setup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        setup_text = """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ iOS Shortcuts:

üì± –®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ Shortcut
1. –û—Ç–∫—Ä–æ–π—Ç–µ "–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã"
2. –ù–∞–∂–º–∏—Ç–µ "+" ‚Üí "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"
3. –ù–∞–∑–æ–≤–∏—Ç–µ Shortcut: "CreateReminder"

üî® –®–∞–≥ 2: –î–æ–±–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–≤–æ–¥–∞"
2. "–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è" (–∫–ª—é—á: title)
3. "–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è" (–∫–ª—é—á: date) 
4. "–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è" (–∫–ª—é—á: time)
5. "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

‚öôÔ∏è –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Shortcut:
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å Siri"
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–†–∞–∑—Ä–µ—à–∏—Ç—å –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø" 
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Ö–æ–¥–µ"

üîë –®–∞–≥ 4: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è:
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Üí –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚úÖ

–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π!"""
        await update.message.reply_text(setup_text)

    def smart_pattern_analysis(self, text: str) -> dict:
        """–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
        
        task_keywords = {
            'meeting': ['–≤—Å—Ç—Ä–µ—á–∞', '—Å–æ–±—Ä–∞–Ω–∏–µ', '—Å–æ–≤–µ—â–∞–Ω–∏–µ'],
            'medicine': ['–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '—Ç–∞–±–ª–µ—Ç–∫–∞', '–ø—Ä–∏–Ω—è—Ç—å', '–≤—Ä–∞—á'],
            'shopping': ['–∫—É–ø–∏—Ç—å', '–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–¥—É–∫—Ç—ã'],
            'call': ['–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '–∑–≤–æ–Ω–æ–∫', '—Å–≤—è–∑–∞—Ç—å—Å—è'],
            'work': ['—Å–¥–∞—Ç—å', '–æ—Ç—á–µ—Ç', '—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–µ–∫—Ç'],
            'personal': ['–Ω–∞–ø–æ–º–Ω–∏', '–Ω–µ –∑–∞–±—ã—Ç—å', '–≤–∞–∂–Ω–æ']
        }
        
        priority_words = {
            'high': ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–∞—Å–∞–ø'],
            'low': ['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–Ω–µ —Å—Ä–æ—á–Ω–æ']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        found_keywords = []
        category = 'other'
        
        for cat, keywords in task_keywords.items():
            for keyword in keywords:
                if keyword in text.lower():
                    found_keywords.append(keyword)
                    category = cat
                    break
        
        if not found_keywords:
            return {"is_task": False, "reason": "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–¥–∞—á"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        now = datetime.now()
        date_found = None
        time_found = None
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        if '–∑–∞–≤—Ç—Ä–∞' in text.lower():
            date_found = (now + timedelta(days=1)).strftime('%Y-%m-%d')
        elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text.lower():
            date_found = (now + timedelta(days=2)).strftime('%Y-%m-%d')
        elif '—Å–µ–≥–æ–¥–Ω—è' in text.lower():
            date_found = now.strftime('%Y-%m-%d')
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2, '—á–µ—Ç–≤–µ—Ä–≥': 3,
            '–ø—è—Ç–Ω–∏—Ü–∞': 4, '—Å—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }
        
        for day_name, day_num in weekdays.items():
            if day_name in text.lower():
                days_ahead = day_num - now.weekday()
                if days_ahead <= 0:
                    days_ahead += 7
                target_date = now + timedelta(days=days_ahead)
                date_found = target_date.strftime('%Y-%m-%d')
                break
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è "—á–µ—Ä–µ–∑ X"
        through_match = re.search(r'—á–µ—Ä–µ–∑ (\d+) (—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)', text.lower())
        if through_match:
            amount = int(through_match.group(1))
            unit = through_match.group(2)
            
            if '—á–∞—Å' in unit:
                target_time = now + timedelta(hours=amount)
                date_found = target_time.strftime('%Y-%m-%d')
                time_found = target_time.strftime('%H:%M')
            elif '–¥–µ–Ω—å' in unit:
                target_date = now + timedelta(days=amount)
                date_found = target_date.strftime('%Y-%m-%d')
        
        # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        time_patterns = [
            r'(\d{1,2}):(\d{2})',
            r'–≤ (\d{1,2}) (—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞)',
            r'(\d{1,2}) —á–∞—Å–æ–≤'
        ]
        
        for pattern in time_patterns:
            time_match = re.search(pattern, text.lower())
            if time_match:
                if ':' in time_match.group():
                    time_found = time_match.group()
                else:
                    hour = int(time_match.group(1))
                    period = time_match.group(2) if len(time_match.groups()) > 1 else None
                    
                    if period == '–≤–µ—á–µ—Ä–∞' and hour < 12:
                        hour += 12
                    elif period == '—É—Ç—Ä–∞' and hour == 12:
                        hour = 0
                        
                    time_found = f"{hour:02d}:00"
                break
        
        # –í—Ä–µ–º—è –ø–æ —Å–ª–æ–≤–∞–º
        if not time_found:
            if '—É—Ç—Ä–æ–º' in text.lower():
                time_found = '09:00'
            elif '–¥–Ω–µ–º' in text.lower():
                time_found = '14:00'
            elif '–≤–µ—á–µ—Ä–æ–º' in text.lower():
                time_found = '18:00'
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority = 'medium'
        for level, words in priority_words.items():
            for word in words:
                if word in text.lower():
                    priority = level
                    break
        
        if any(word in text.lower() for word in ['—Å–µ–≥–æ–¥–Ω—è', '—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ']):
            priority = 'high'
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = text
        if len(title) > 50:
            title_clean = re.sub(r'\b(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|—á–µ—Ä–µ–∑ \d+ \w+|\d{1,2}:\d{2}|–≤ \d{1,2} \w+)\b', '', title.lower())
            title_clean = re.sub(r'\s+', ' ', title_clean).strip()
            if len(title_clean) > 50:
                title = title_clean[:47] + "..."
            else:
                title = title_clean.capitalize() if title_clean else text[:50]
        
        return {
            "is_task": True,
            "title": title,
            "description": text,
            "date": date_found,
            "time": time_found,
            "priority": priority,
            "category": category,
            "keywords_found": found_keywords
        }

    def create_ios_link(self, reminder_data: dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ iOS Shortcuts"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        json_data = {
            "title": reminder_data.get("title", ""),
            "date": reminder_data.get("date", ""),
            "time": reminder_data.get("time", ""),
            "priority": reminder_data.get("priority", "medium"),
            "category": reminder_data.get("category", "other")
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
        json_string = json.dumps(json_data, ensure_ascii=False)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –¥–ª—è URL
        encoded_json = quote(json_string)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É iOS Shortcuts
        ios_url = f"shortcuts://run-shortcut?name=CreateReminder&input=text&text={encoded_json}"
        
        return ios_url

    def create_reminder_url(self, title: str, date: str = "", time: str = "") -> str:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ x-apple-reminder"""
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π iOS
        reminder_url = "x-apple-reminder://add"
        params = []
        
        if title:
            params.append(f"title={quote(title)}")
        
        if date and time:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            datetime_str = f"{date} {time}"
            params.append(f"dueDate={quote(datetime_str)}")
        elif date:
            params.append(f"dueDate={quote(date)}")
        
        if params:
            reminder_url += "?" + "&".join(params)
        
        return reminder_url

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} ({user_id}): {user_message}")
        
        processing_msg = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ–∑–¥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É...")
        
        start_time = datetime.now()
        
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            analysis = self.smart_pattern_analysis(user_message)
            processing_time = (datetime.now() - start_time).total_seconds()
            
            if not analysis.get("is_task", False):
                reason = analysis.get("reason", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É")
                await processing_msg.edit_text(
                    f"ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å:\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: '–∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: '–∫—É–ø–∏—Ç—å', '–≤—Å—Ç—Ä–µ—á–∞', '–Ω–∞–ø–æ–º–Ω–∏'\n"
                    f"‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É: '–≤—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º'\n\n"
                    f"‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {processing_time:.1f}—Å"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º iOS —Å—Å—ã–ª–∫–∏
            shortcuts_url = self.create_ios_link(analysis)
            reminder_url = self.create_reminder_url(
                analysis.get("title", ""),
                analysis.get("date", ""),
                analysis.get("time", "")
            )
            
            # –≠–º–æ–¥–∑–∏ –∫–∞—Ä—Ç–∞
            emoji_map = {
                "high": "üî•", "medium": "‚≠ê", "low": "üìù",
                "meeting": "üë•", "medicine": "üíä", "shopping": "üõí",
                "call": "üìû", "work": "üíº", "other": "üìã"
            }
            
            priority_emoji = emoji_map.get(analysis.get('priority', 'medium'), '‚≠ê')
            category_emoji = emoji_map.get(analysis.get('category', 'other'), 'üìã')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            success_text = f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤—ã!\n\n"
            success_text += f"{category_emoji} **{analysis['title']}**\n"
            
            if analysis.get('date'):
                success_text += f"üìÖ –î–∞—Ç–∞: {analysis['date']}\n"
            if analysis.get('time'):
                success_text += f"‚è∞ –í—Ä–µ–º—è: {analysis['time']}\n"
                
            success_text += f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {analysis['priority']}\n"
            
            if 'keywords_found' in analysis:
                success_text += f"üîç –ù–∞–π–¥–µ–Ω—ã: {', '.join(analysis['keywords_found'])}\n"
            
            success_text += f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å\n\n"
            
            success_text += f"üîó **–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n"
            success_text += f"[üì± –ß–µ—Ä–µ–∑ Shortcuts]({shortcuts_url})\n"
            success_text += f"[üçé –ü—Ä—è–º–æ –≤ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]({reminder_url})\n\n"
            success_text += f"ü§ó Powered by Hugging Face"
            
            await processing_msg.edit_text(success_text, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await processing_msg.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}\n\n"
                f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("setup", self.setup_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("üöÄ Auto iOS Reminder Bot –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        exit(1)
        
    logger.info("üçé –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ iOS URL Scheme")
    logger.info(f"üîë HF API Key: {'‚úÖ' if HF_API_KEY else '‚ùå'}")
    
    bot = AutoReminderBot()
    bot.run()
